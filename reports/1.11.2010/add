class Test { 
 static function main() {
        var x = 5;
        var z  = x+1;
 }
}
------------------------------------------------------------------------------------
cldecl : Type.module_type =
  TClassDecl
   {cl_path = ([], "Test");
    cl_pos = {Ast.pfile = "Test.hx"; Ast.pmin = 0; Ast.pmax = 71};
    cl_private = false; cl_doc = None; cl_meta = <fun>; cl_kind = KNormal;
    cl_extern = false; cl_interface = false; cl_types = []; cl_super = None;
    cl_implements = []; cl_fields = <abstr>; cl_statics = <abstr>;
    cl_ordered_statics =
     [{cf_name = "main"; cf_type = TLazy {contents = <fun>};
       cf_public = false; cf_doc = None; cf_meta = <fun>;
       cf_kind = Method MethNormal; cf_params = [];
       cf_expr =
        Some
         {eexpr =
           TFunction
            {tf_args = [];
             tf_type =
              TMono
               {contents =
                 Some
                  (TEnum
                    ({e_path = ([], "Void");
                      e_pos =
                       {Ast.pfile = "./std/StdTypes.hx"; Ast.pmin = 1486;
                        Ast.pmax = 1499};
                      e_doc =
                       Some
                        "\n\tThe standard Void type. Only [null] values can be of the type [Void].\n";
                      e_meta = <fun>; e_private = false; e_extern = true;
                      e_types = []; e_constrs = <abstr>; e_names = []},
                    []))};
             tf_expr =
              {eexpr =
                TBlock
                 [{eexpr =
                    TVars
                     [("x",
                       TMono
                        {contents =
                          Some
                           (TInst
                             ({cl_path = ([], "Int");
                               cl_pos =
                                {Ast.pfile = "./std/StdTypes.hx";
                                 Ast.pmin = 1682; Ast.pmax = 1709};
                               cl_private = false;
                               cl_doc =
                                Some
                                 "\n\tThe standard Int type. Its precision depends on the platform.\n";
                               cl_meta = <fun>; cl_kind = KNormal;
                               cl_extern = true; cl_interface = false;
                               cl_types = [];
                               cl_super =
                                Some
                                 ({cl_path = ([], "Float");
                                   cl_pos =
                                    {Ast.pfile = "./std/StdTypes.hx";
                                     Ast.pmin = 1587; Ast.pmax = 1602};
                                   cl_private = false;
                                   cl_doc =
                                    Some
                                     "\n\tThe standard Float type, this is a double-precision IEEE 64bit float.\n";
                                   cl_meta = <fun>; cl_kind = KNormal;
                                   cl_extern = true; cl_interface = false;
                                   cl_types = []; cl_super = None;
                                   cl_implements = []; cl_fields = <abstr>;
                                   cl_statics = <abstr>;
                                   cl_ordered_statics = [];
                                   cl_ordered_fields = []; cl_dynamic = None;
                                   cl_array_access = None;
                                   cl_constructor = None; cl_init = None;
                                   cl_overrides = []},
                                  []);
                               cl_implements = []; cl_fields = <abstr>;
                               cl_statics = <abstr>; cl_ordered_statics = [];
                               cl_ordered_fields = []; cl_dynamic = None;
                               cl_array_access = None; cl_constructor = None;
                               cl_init = None; cl_overrides = []},
                             []))},
                       Some
                        {eexpr = TConst (TInt 5l);
                         etype =
                          TInst
                           ({cl_path = ([], "Int");
                             cl_pos =
                              {Ast.pfile = "./std/StdTypes.hx";
                               Ast.pmin = 1682; Ast.pmax = 1709};
                             cl_private = false;
                             cl_doc =
                              Some
                               "\n\tThe standard Int type. Its precision depends on the platform.\n";
                             cl_meta = <fun>; cl_kind = KNormal;
                             cl_extern = true; cl_interface = false;
                             cl_types = [];
                             cl_super =
                              Some
                               ({cl_path = ([], "Float");
                                 cl_pos =
                                  {Ast.pfile = "./std/StdTypes.hx";
                                   Ast.pmin = 1587; Ast.pmax = 1602};
                                 cl_private = false;
                                 cl_doc =
                                  Some
                                   "\n\tThe standard Float type, this is a double-precision IEEE 64bit float.\n";
                                 cl_meta = <fun>; cl_kind = KNormal;
                                 cl_extern = true; cl_interface = false;
                                 cl_types = []; cl_super = None;
                                 cl_implements = []; cl_fields = <abstr>;
                                 cl_statics = <abstr>;
                                 cl_ordered_statics = [];
                                 cl_ordered_fields = []; cl_dynamic = None;
                                 cl_array_access = None;
                                 cl_constructor = None; cl_init = None;
                                 cl_overrides = []},
                                []);
                             cl_implements = []; cl_fields = <abstr>;
                             cl_statics = <abstr>; cl_ordered_statics = [];
                             cl_ordered_fields = []; cl_dynamic = None;
                             cl_array_access = None; cl_constructor = None;
                             cl_init = None; cl_overrides = []},
                           []);
                         epos =
                          {Ast.pfile = "Test.hx"; Ast.pmin = 49;
                           Ast.pmax = 50}})];
                   etype =
                    TEnum
                     ({e_path = ([], "Void");
                       e_pos =
                        {Ast.pfile = "./std/StdTypes.hx"; Ast.pmin = 1486;
                         Ast.pmax = 1499};
                       e_doc =
                        Some
                         "\n\tThe standard Void type. Only [null] values can be of the type [Void].\n";
                       e_meta = <fun>; e_private = false; e_extern = true;
                       e_types = []; e_constrs = <abstr>; e_names = []},
                     []);
                   epos =
                    {Ast.pfile = "Test.hx"; Ast.pmin = 41; Ast.pmax = 51}};
                  {eexpr =
                    TVars
                     [("z",
                       TMono
                        {contents =
                          Some
                           (TInst
                             ({cl_path = ([], "Int");
                               cl_pos =
                                {Ast.pfile = "./std/StdTypes.hx";
                                 Ast.pmin = 1682; Ast.pmax = 1709};
                               cl_private = false;
                               cl_doc =
                                Some
                                 "\n\tThe standard Int type. Its precision depends on the platform.\n";
                               cl_meta = <fun>; cl_kind = KNormal;
                               cl_extern = true; cl_interface = false;
                               cl_types = [];
                               cl_super =
                                Some
                                 ({cl_path = ([], "Float");
                                   cl_pos =
                                    {Ast.pfile = "./std/StdTypes.hx";
                                     Ast.pmin = 1587; Ast.pmax = 1602};
                                   cl_private = false;
                                   cl_doc =
                                    Some
                                     "\n\tThe standard Float type, this is a double-precision IEEE 64bit float.\n";
                                   cl_meta = <fun>; cl_kind = KNormal;
                                   cl_extern = true; cl_interface = false;
                                   cl_types = []; cl_super = None;
                                   cl_implements = []; cl_fields = <abstr>;
                                   cl_statics = <abstr>;
                                   cl_ordered_statics = [];
                                   cl_ordered_fields = []; cl_dynamic = None;
                                   cl_array_access = None;
                                   cl_constructor = None; cl_init = None;
                                   cl_overrides = []},
                                  []);
                               cl_implements = []; cl_fields = <abstr>;
                               cl_statics = <abstr>; cl_ordered_statics = [];
                               cl_ordered_fields = []; cl_dynamic = None;
                               cl_array_access = None; cl_constructor = None;
                               cl_init = None; cl_overrides = []},
                             []))},
                       Some
                        {eexpr =
                          TBinop (Ast.OpAdd,
                           {eexpr = TLocal "x";
                            etype =
                             TMono
                              {contents =
                                Some
                                 (TInst
                                   ({cl_path = ([], "Int");
                                     cl_pos =
                                      {Ast.pfile = "./std/StdTypes.hx";
                                       Ast.pmin = 1682; Ast.pmax = 1709};
                                     cl_private = false;
                                     cl_doc =
                                      Some
                                       "\n\tThe standard Int type. Its precision depends on the platform.\n";
                                     cl_meta = <fun>; cl_kind = KNormal;
                                     cl_extern = true; cl_interface = false;
                                     cl_types = [];
                                     cl_super =
                                      Some
                                       ({cl_path = ([], "Float");
                                         cl_pos =
                                          {Ast.pfile = "./std/StdTypes.hx";
                                           Ast.pmin = 1587; Ast.pmax = 1602};
                                         cl_private = false;
                                         cl_doc =
                                          Some
                                           "\n\tThe standard Float type, this is a double-precision IEEE 64bit float.\n";
                                         cl_meta = <fun>; cl_kind = KNormal;
                                         cl_extern = true;
                                         cl_interface = false; cl_types = [];
                                         cl_super = None; cl_implements = [];
                                         cl_fields = <abstr>;
                                         cl_statics = <abstr>;
                                         cl_ordered_statics = [];
                                         cl_ordered_fields = [];
                                         cl_dynamic = None;
                                         cl_array_access = None;
                                         cl_constructor = None;
                                         cl_init = None; cl_overrides = []},
                                        []);
                                     cl_implements = []; cl_fields = <abstr>;
                                     cl_statics = <abstr>;
                                     cl_ordered_statics = [];
                                     cl_ordered_fields = [];
                                     cl_dynamic = None;
                                     cl_array_access = None;
                                     cl_constructor = None; cl_init = None;
                                     cl_overrides = []},
                                   []))};
                            epos =
                             {Ast.pfile = "Test.hx"; Ast.pmin = 62;
                              Ast.pmax = 63}},
                           {eexpr = TConst (TInt 1l);
                            etype =
                             TInst
                              ({cl_path = ([], "Int");
                                cl_pos =
                                 {Ast.pfile = "./std/StdTypes.hx";
                                  Ast.pmin = 1682; Ast.pmax = 1709};
                                cl_private = false;
                                cl_doc =
                                 Some
                                  "\n\tThe standard Int type. Its precision depends on the platform.\n";
                                cl_meta = <fun>; cl_kind = KNormal;
                                cl_extern = true; cl_interface = false;
                                cl_types = [];
                                cl_super =
                                 Some
                                  ({cl_path = ([], "Float"); cl_pos = ...;
                                    cl_private = ...; cl_doc = ...;
                                    cl_meta = ...; cl_kind = ...;
                                    cl_extern = ...; cl_interface = ...;
                                    cl_types = ...; cl_super = ...;
                                    cl_implements = ...; cl_fields = ...;
                                    cl_statics = ...;
                                    cl_ordered_statics = ...;
                                    cl_ordered_fields = ...;
                                    cl_dynamic = ...; cl_array_access = ...;
                                    cl_constructor = ...; cl_init = ...;
                                    cl_overrides = ...},
                                   ...);
                                cl_implements = ...; cl_fields = ...;
                                cl_statics = ...; cl_ordered_statics = ...;
                                cl_ordered_fields = ...; cl_dynamic = ...;
                                cl_array_access = ...; cl_constructor = ...;
                                cl_init = ...; cl_overrides = ...},
                              ...);
                            epos = ...});
                         etype = ...; epos = ...});
                      ...];
                   etype = ...; epos = ...};
                  ...];
               etype = ...; epos = ...}};
          etype = ...; epos = ...}};
      ...];
    cl_ordered_fields = ...; cl_dynamic = ...; cl_array_access = ...;
    cl_constructor = ...; cl_init = ...; cl_overrides = ...}
